var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ITensorTDVP","category":"page"},{"location":"#ITensorTDVP","page":"Home","title":"ITensorTDVP","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ITensorTDVP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ITensorTDVP]","category":"page"},{"location":"#ITensorTDVP.tdvp-Tuple{ITensors.MPO, ITensors.MPS, ITensors.Sweeps}","page":"Home","title":"ITensorTDVP.tdvp","text":"tdvp(H::MPO,psi0::MPS,sweeps::Sweeps;kwargs...)\n\nUse the density matrix renormalization group (DMRG) algorithm to optimize a matrix product state (MPS) such that it is the eigenvector of lowest eigenvalue of a Hermitian matrix H, represented as a matrix product operator (MPO). The MPS psi0 is used to initialize the MPS to be optimized, and the sweeps object determines the parameters used to  control the DMRG algorithm.\n\nReturns:\n\nenergy::Float64 - eigenvalue of the optimized MPS\npsi::MPS - optimized MPS\n\nOptional keyword arguments:\n\noutputlevel::Int = 1 - larger outputlevel values make DMRG print more information and 0 means no output\nobserver - object implementing the Observer interface which can perform measurements and stop DMRG early\nwrite_when_maxdim_exceeds::Int - when the allowed maxdim exceeds this value, begin saving tensors to disk to free memory in large calculations\n\n\n\n\n\n","category":"method"},{"location":"#ITensorTDVP.tdvp-Tuple{ITensors.MPO, Vector{ITensors.MPS}, ITensors.MPS, ITensors.Sweeps}","page":"Home","title":"ITensorTDVP.tdvp","text":"tdvp(H::MPO,Ms::Vector{MPS},psi0::MPS,sweeps::Sweeps;kwargs...)\n\nUse the density matrix renormalization group (DMRG) algorithm to optimize a matrix product state (MPS) such that it is the eigenvector of lowest eigenvalue of a Hermitian matrix H, subject to the constraint that the MPS is orthogonal to each of the MPS provided in the Vector Ms. The orthogonality constraint is approximately enforced by adding to H terms of  the form w|M1><M1| + w|M2><M2| + ... where Ms=[M1,M2,...] and w is the \"weight\" parameter, which can be adjusted through the optional weight keyword argument. The MPS psi0 is used to initialize the MPS to be optimized, and the sweeps object determines the parameters used to  control the DMRG algorithm.\n\nReturns:\n\nenergy::Float64 - eigenvalue of the optimized MPS\npsi::MPS - optimized MPS\n\n\n\n\n\n","category":"method"},{"location":"#ITensorTDVP.tdvp-Tuple{Vector{ITensors.MPO}, ITensors.MPS, ITensors.Sweeps}","page":"Home","title":"ITensorTDVP.tdvp","text":"tdvp(Hs::Vector{MPO},psi0::MPS,sweeps::Sweeps;kwargs...)\n\nUse the density matrix renormalization group (DMRG) algorithm to optimize a matrix product state (MPS) such that it is the eigenvector of lowest eigenvalue of a Hermitian matrix H. The MPS psi0 is used to initialize the MPS to be optimized, and the sweeps object determines the parameters used to  control the DMRG algorithm.\n\nThis version of tdvp accepts a representation of H as a Vector of MPOs, Hs = [H1,H2,H3,...] such that H is defined as H = H1+H2+H3+... Note that this sum of MPOs is not actually computed; rather the set of MPOs [H1,H2,H3,..] is efficiently looped over at  each step of the DMRG algorithm when optimizing the MPS.\n\nReturns:\n\nenergy::Float64 - eigenvalue of the optimized MPS\npsi::MPS - optimized MPS\n\n\n\n\n\n","category":"method"}]
}
